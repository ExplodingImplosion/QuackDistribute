[gd_resource type="VisualShader" load_steps=17 format=2]

[ext_resource path="res://3d assets/Materials/De-res textures/Grid.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "Amount"

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "Texture"

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "Grid_Scale"

[sub_resource type="VisualShaderNodeVectorCompose" id=6]

[sub_resource type="VisualShaderNodeTransformVecMult" id=7]

[sub_resource type="VisualShaderNodeVec3Uniform" id=8]
uniform_name = "Grid_Location"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "camera"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 0.0, 1, 100.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "Divide"

[sub_resource type="VisualShaderNodeScalarClamp" id=13]

[sub_resource type="VisualShaderNodeScalarUniform" id=14]
uniform_name = "Max"

[sub_resource type="VisualShaderNodeScalarOp" id=15]
operator = 1

[resource]
code = "shader_type spatial;
uniform float Max;
uniform float Amount;
uniform float Divide;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	mat4 n_out3p0;
	n_out3p0 = CAMERA_MATRIX;

// Input:4
	vec3 n_out4p0;
	n_out4p0 = VERTEX;

// TransformVectorMult:2
	vec3 n_out2p0;
	n_out2p0 = ( n_out3p0 * vec4(n_out4p0, 1.0) ).xyz;

// ScalarUniform:8
	float n_out8p0;
	n_out8p0 = Max;

// ScalarUniform:11
	float n_out11p0;
	n_out11p0 = Amount;

// ScalarOp:10
	float n_out10p0;
	n_out10p0 = n_out8p0 * n_out11p0;

// ScalarOp:9
	float n_out9p0;
	n_out9p0 = dot(n_out2p0,vec3(0.333333,0.333333,0.333333)) - n_out10p0;

// ScalarUniform:6
	float n_out6p0;
	n_out6p0 = Divide;

// ScalarOp:5
	float n_out5p0;
	n_out5p0 = n_out9p0 / n_out6p0;

// ScalarClamp:7
	float n_in7p1 = 0.00000;
	float n_in7p2 = 1.00000;
	float n_out7p0;
	n_out7p0 = clamp( n_out5p0, n_in7p1, n_in7p2 );

// Output:0
	EMISSION = vec3(n_out7p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -556, 181 )
nodes/fragment/0/position = Vector2( 800, 0 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -700, 300 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -960, 340 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( -980, 440 )
nodes/fragment/5/node = SubResource( 11 )
nodes/fragment/5/position = Vector2( -280, 300 )
nodes/fragment/6/node = SubResource( 12 )
nodes/fragment/6/position = Vector2( -660, 600 )
nodes/fragment/7/node = SubResource( 13 )
nodes/fragment/7/position = Vector2( -100, 300 )
nodes/fragment/8/node = SubResource( 14 )
nodes/fragment/8/position = Vector2( -1120, 560 )
nodes/fragment/9/node = SubResource( 15 )
nodes/fragment/9/position = Vector2( -460, 300 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -880, 560 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1120, 640 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -660, -160 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -360, -160 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -733, 75.5 )
nodes/fragment/18/node = SubResource( 6 )
nodes/fragment/18/position = Vector2( -640, -380 )
nodes/fragment/20/node = SubResource( 8 )
nodes/fragment/20/position = Vector2( -880, -300 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 1, 6, 0, 5, 1, 5, 0, 7, 0, 7, 0, 0, 5, 2, 0, 9, 0, 9, 0, 5, 0, 8, 0, 10, 0, 10, 0, 9, 1, 11, 0, 10, 1 )
